<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Python on Wei Guan</title>
        <link>https://wguansky.github.io/blog/categories/python/</link>
        <description>Recent content in Python on Wei Guan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 14 May 2023 10:11:13 +0800</lastBuildDate><atom:link href="https://wguansky.github.io/blog/categories/python/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Python package load</title>
        <link>https://wguansky.github.io/blog/post/package_load/</link>
        <pubDate>Sun, 14 May 2023 10:11:13 +0800</pubDate>
        
        <guid>https://wguansky.github.io/blog/post/package_load/</guid>
        <description>&lt;p&gt;During work on project &lt;a class=&#34;link&#34; href=&#34;https://github.com/mstr-kiai/pl-k8s-infrastructure&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pl-k8s-kubernetes&lt;/a&gt;,
I encounter an issue with the unit test, which can&amp;rsquo;t pass, here is the example shows what&amp;rsquo;s  wrong
with that.&lt;/p&gt;
&lt;p&gt;First create a source code with static method and named this file as aws_service_utils.py
~~python
import boto3
import json&lt;/p&gt;
&lt;p&gt;class AwsSecretManager:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@staticmethod
def create_secret(secret_name, json_content):
    secretsmanager_client = boto3.client(&#39;secretsmanager&#39;)

    # Create a secret
    response = secretsmanager_client.create_secret(
        Name=secret_name, # Name of the secret
        SecretString=json.dumps(json_content) # Secret data as a JSON string
    )

    return response

@staticmethod
def delete_secret(secret_id):
    secretsmanager_client = boto3.client(&#39;secretsmanager&#39;)

    # Create a secret
    response = secretsmanager_client.delete_secret(
        Name=secret_name, # Name of the secret
    )

    return response
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;~~&lt;/p&gt;
&lt;p&gt;Second crate a method based on this method, backup_delete_secret.py
~~python
from aws_service_utils import AwsSecretManager as SM&lt;/p&gt;
&lt;p&gt;def operator(secret_name, json_content):
print(&amp;ldquo;Create secret&amp;rdquo;)
response = SM.create_secret(secret_name, json_content)
if response:
SM.delete_secret(secret_name)
print(&amp;lsquo;Delete secret success&amp;rsquo;)
else:
print(&amp;lsquo;Create secret fail, no need to delete secret&amp;rsquo;)
~~&lt;/p&gt;
&lt;p&gt;Third create unittest cases based on those two methods
~~python
from mock import patch, Mock
import boto3
import unittest
import sys
sys.path.append(&amp;quot;.&amp;quot;)
from backup_delete_secret import operator
import aws_service_utils&lt;/p&gt;
&lt;p&gt;class TestBackupAndDelete(unittest.TestCase):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@patch(&#39;aws_service_utils.AwsSecretManager.create_secret&#39;)
@patch(&#39;aws_service_utils.AwsSecretManager.delete_secret&#39;)
def test_operator_alway_work(self, mock_delete, mock_create):
    operator(&amp;quot;test&amp;quot;, {
        &amp;quot;name&amp;quot;:&amp;quot;wguan&amp;quot;
    })
    mock_create.return_value = {
        &amp;quot;arn&amp;quot;:&amp;quot;1234&amp;quot;
    }
    self.assertEqual(mock_create.call_count, 1)
    self.assertEqual(mock_delete.call_count, 1)

def test_operator_related_order(self):
    aws_service_utils.AwsSecretManager.create_secret = Mock(return_value={
        &amp;quot;arn&amp;quot;: &amp;quot;1234&amp;quot;
    })
    aws_service_utils.AwsSecretManager.delete_secret = Mock()

    operator(&amp;quot;test&amp;quot;, {
        &amp;quot;name&amp;quot;:&amp;quot;wguan&amp;quot;
    })

    self.assertEqual(aws_service_utils.AwsSecretManager.create_secret.call_count, 1)
    self.assertEqual(aws_service_utils.AwsSecretManager.delete_secret.call_count, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;~~
In the above we have defined two similar methods, one is use patch to define a mock, it will
release the mock object after the unit test finish, but if we define a function to mock object as follow
~~python
aws_service_utils.AwsSecretManager.create_secret = Mock(return_value={
&amp;ldquo;arn&amp;rdquo;: &amp;ldquo;1234&amp;rdquo;
})
aws_service_utils.AwsSecretManager.delete_secret = Mock()
~~
it won&amp;rsquo;t release this static method, you can verify use the following method to verify. If you write unit test
with patch method, the following will seccuess, but otherwise the following method may fail. But it may also
success, this is relate another question, how does nose2 load unittest cases. This can be verify by yourself.
If you want to let the case work well, there is another metod to fix, reload the package.&lt;/p&gt;
&lt;p&gt;~~python
import boto3
import unittest
import sys
sys.path.append(&amp;quot;.&amp;quot;)
from moto import mock_secretsmanager
from aws_service_utils import AwsSecretManager as SM&lt;/p&gt;
&lt;p&gt;class TestAwsSecretManager(unittest.TestCase):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@mock_secretsmanager
def test_creat_secret(self):
    response = SM.create_secret(&amp;quot;test&amp;quot;, {
        &amp;quot;name&amp;quot;: &amp;quot;wguan&amp;quot;
    })
    self.assertEqual(response[&#39;ResponseMetadata&#39;][&#39;HTTPStatusCode&#39;], 200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;~~&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For static method, never assign Mock object to static function, it will effect all the unit test after this case has been called&lt;/li&gt;
&lt;li&gt;The order of nose2 load unit test cases is related the name of case name&lt;/li&gt;
&lt;li&gt;Import AwsSecretManager in the last file, but it doesn&amp;rsquo;t import again, the root cause is python only import once, so there is anthor method to fix it, just use importlib.reload(package)&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Metadata Class</title>
        <link>https://wguansky.github.io/blog/post/metadata_class/</link>
        <pubDate>Fri, 30 Dec 2022 04:37:23 +0800</pubDate>
        
        <guid>https://wguansky.github.io/blog/post/metadata_class/</guid>
        <description>&lt;p&gt;Everything is object in python, so class is aslo object named
&lt;a class=&#34;link&#34; href=&#34;https://www.datacamp.com/tutorial/python-metaclasses&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Metadata Calss&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-define-and-use-metaclass&#34;&gt;How to use define and use metaclass&lt;/h2&gt;
&lt;p&gt;The basic metadata class is &lt;strong&gt;type&lt;/strong&gt;, you can define an object from this type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PythonClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class name&amp;#39;&lt;/span&gt;, (supper class,), attributes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above will retruen a calss. If you want to define a new class, you can
inhiert from type as follow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Single&lt;/span&gt;(type):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;strong&gt;Single&lt;/strong&gt; is a new metadata class, then you can use it to define a new class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;(metaclass&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Single):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then Logger will try to use Single to help create the class.&lt;/p&gt;
&lt;h2 id=&#34;what-should-we-implement-a-metacalss&#34;&gt;What should we implement a metacalss&lt;/h2&gt;
&lt;p&gt;In order to create an object or class, there are three special methods
&lt;strong&gt;__new__&lt;/strong&gt;, &lt;strong&gt;__init__&lt;/strong&gt;, and &lt;strong&gt;__call__&lt;/strong&gt;. When we initial
an object, it will call &lt;strong&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/strong&gt; first to malloc the memory and then use
&lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/strong&gt; to set some properities. But what&amp;rsquo;s method &lt;strong&gt;__call__&lt;/strong&gt;,
it just a special method, when you call &lt;strong&gt;ClassName(*args, **kwargs)&lt;/strong&gt;,
then it will call method &lt;strong&gt;__call__&lt;/strong&gt; automactically.
So we can change the inital process when we create a class object.&lt;/p&gt;
&lt;p&gt;Here is an example, how to use meta calss define &lt;strong&gt;Single&lt;/strong&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Single&lt;/span&gt;(type):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _instances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(cls, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cls &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_instances:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_instances[cls] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; super(SingletonMeta,cls)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__call__(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_instances[cls]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Define object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;(metaclass&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Single):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you call Logger() to create an object, this it will call Single&amp;rsquo;s
__new__, and __init__, then it will return an class object,
then it will call __call__ method of &lt;strong&gt;metaclass&lt;/strong&gt;.
There is an very important notice: If you special __call__ method, then
the methods __init__ and __new__ of object will never been call,
if you want it still be called. For this case, it will call
__init__ and __new__, because super class will call them automatically.&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#*************************************************************************&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# File Name: test.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Author: Guan Wei&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Mail: wguan@microstrategy.com &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Created Time: Sun Oct 30 22:49:17 2022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#************************************************************************&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassA&lt;/span&gt;(type):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __new__(cls, name, base, dct):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata class&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__new__(cls, name, base, dct)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(cls, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call ClassA instance&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__new__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# instance.__new__()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# instance.__init__()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassB&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __metaclass__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClassA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Call classb init&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __new__(cls):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;calss classb new&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__new__(cls)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ClassB()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python unit test</title>
        <link>https://wguansky.github.io/blog/post/python_test/</link>
        <pubDate>Thu, 29 Dec 2022 13:35:43 +0800</pubDate>
        
        <guid>https://wguansky.github.io/blog/post/python_test/</guid>
        <description>&lt;p&gt;Unit test is very import to improve the code robust. Each time,
when we do some changes or code refactor, we need to verify our code can work
well. And those errors can be exposed in develop process not in the test
process.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;p&gt;For pythhon, we usually use two type of tools to run python test
&lt;a class=&#34;link&#34; href=&#34;https://docs.nose2.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nose2&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://docs.pytest.org/en/7.2.x/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pytest&lt;/a&gt;,
and they both based on &lt;strong&gt;unittest&lt;/strong&gt;. In my mind, if you want to test or debug
only one unit case, I recommand to use pytest.&lt;/p&gt;
&lt;h2 id=&#34;mock&#34;&gt;Mock&lt;/h2&gt;
&lt;p&gt;Mock is very useful method to write unit test, and there is a very important
and confuse about mock.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@patch.object&lt;/span&gt;(Version, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;validate_version&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@patch.object&lt;/span&gt;(Version, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get_version&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pre_validation.linux.verify_linux_version.get_version_from_install_xml&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_verify_mstr_linux_version&lt;/span&gt;(self, m_install_xml, m_get_version, m_validate_version):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_install_xml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.107.5044&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_get_version&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version_short&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version_build&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_validate_version&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        return_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; verify_linux_version()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(return_result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Here you can see the order in from right to left not from left to right.&lt;/li&gt;
&lt;li&gt;For install_xml, you can see it use the absoulte path and this function
is call in that file, not the function define in that file.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
